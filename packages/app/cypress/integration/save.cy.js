/*  TODO: 
        Start with one of the following cases:
        1a) Start from scratch, can save
        1b) Start from scratch, can save as
        2a) AO "Created by you", can save
        2b) AO "Created by you", can save as
        3a) AO "Created by others", can't save 
        3b) AO "Created by others", can't save as

        Check that vis is loaded
        Check that AO name is not "Edited"
        Change vis type
        Check that AO name is "Edited"
        Save with "name"
        Check that name is not "Edited"
        Check that name is "name"
        Save as with "other name"
        Check that name is not "Edited"
        Check that name is "other name"
    */

//import { createNewAO } from '../elements/FileMenu'
import { openDimension } from '../elements/DimensionsPanel'
import {
    selectDataElements,
    clickModalUpdateButton,
    selectRelativePeriods,
} from '../elements/DimensionModal'
import { changeVisType } from '../elements/VisualizationTypeSelector'
import {
    expectAOTitleToBeDirty,
    expectAOTitleToBeUnsaved,
    expectAOTitleToBeValue,
    expectAOTitleToNotBeDirty,
    expectVisualizationToBeVisible,
} from '../elements/Chart'
import {
    DIMENSION_ID_DATA,
    isYearOverYear,
    visTypeDisplayNames,
} from '@dhis2/analytics'
import { TEST_DATA_ELEMENTS } from '../utils/data'
import {
    expectSaveAsButtonToBeDisabled,
    saveNewAO,
    expectSaveAsButtonToBeEnabled,
    expectDeleteButtonToBeEnabled,
    expectRenameButtonToBeEnabled,
    expectTranslateButtonToBeEnabled,
    expectShareButtonToBeEnabled,
    expectGetLinkButtonToBeEnabled,
    openFileMenu,
    closeFileMenu,
    saveAOAs,
    saveExistingAO,
    openSavedAOByName,
    deleteAO,
} from '../elements/FileMenu'
import { expectRouteToBeAOId, expectRouteToBeEmpty } from '../elements/Route'
import { getRandomVisType } from '../utils/random'
import { clickMenuBarUpdateButton } from '../elements/MenuBar'
import { selectYoyCategoryOption } from '../elements/Layout'
import { expectStartScreenToBeVisible } from '../elements/StartScreen'

const TEST_VIS_NAME = `TEST ${new Date().toLocaleString()}`
const TEST_VIS_NAME_UPDATED = `${TEST_VIS_NAME} - updated`
const TEST_VIS_DESCRIPTION = 'Generated by Cypress'
const TEST_VIS_TYPE = getRandomVisType()
const TEST_VIS_TYPE_NAME = visTypeDisplayNames[TEST_VIS_TYPE]

// TODO: Add test to check that the description is saved and shown in the interpretations panel

describe('"save" and "save as" for a new AO', () => {
    it('navigates to the start page', () => {
        cy.visit('')
    })
    it(`changes vis type to ${TEST_VIS_TYPE_NAME}`, () => {
        changeVisType(TEST_VIS_TYPE_NAME)
    })
    it('adds Data dimension items', () => {
        openDimension(DIMENSION_ID_DATA)
        selectDataElements(
            TEST_DATA_ELEMENTS.slice(1, 2).map(item => item.name)
        )
        clickModalUpdateButton()
    })
    it('displays an unsaved visualization', () => {
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
        expectAOTitleToBeUnsaved()
        expectRouteToBeEmpty()
    })
    it('checks that Save as is disabled', () => {
        openFileMenu()
        expectSaveAsButtonToBeDisabled()
        closeFileMenu()
    })
    it('saves new AO using "Save"', () => {
        saveNewAO(TEST_VIS_NAME, TEST_VIS_DESCRIPTION)
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
    })
    it('checks that the url was changed', () => {
        expectRouteToBeAOId()
    })
    it('opens File menu', () => {
        openFileMenu()
    })
    it('checks that Save as button is enabled', () => {
        expectSaveAsButtonToBeEnabled()
    })
    it('checks that Delete button is enabled', () => {
        expectDeleteButtonToBeEnabled()
    })
    it('checks that Rename button is enabled', () => {
        expectRenameButtonToBeEnabled()
    })
    it('checks that Translate button is enabled', () => {
        expectTranslateButtonToBeEnabled()
    })
    it('checks that Share button is enabled', () => {
        expectShareButtonToBeEnabled()
    })
    it('checks that Get link button is enabled', () => {
        expectGetLinkButtonToBeEnabled()
    })
    it('closes File menu', () => {
        closeFileMenu()
    })
    it(`changes the period`, () => {
        if (isYearOverYear(TEST_VIS_TYPE)) {
            selectYoyCategoryOption('Last 2 six-months')
            clickMenuBarUpdateButton()
        } else {
            openDimension('pe')
            selectRelativePeriods(['Last six-month'], 'Six-months')
            clickModalUpdateButton()
        }
        expectAOTitleToBeDirty()
    })
    it('saves AO using "Save"', () => {
        saveExistingAO()
        expectAOTitleToNotBeDirty()
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
    })
    it('saves AO using "Save As"', () => {
        saveAOAs(TEST_VIS_NAME_UPDATED)
        expectAOTitleToBeValue(TEST_VIS_NAME_UPDATED)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
    })
})

describe('"save" and "save as" for a saved AO created by you', () => {
    it('navigates to the start page', () => {
        cy.visit('')
    })
    it('opens a saved AO ', () => {
        openSavedAOByName(TEST_VIS_NAME_UPDATED)
    })
    it(`changes the period`, () => {
        if (isYearOverYear(TEST_VIS_TYPE)) {
            selectYoyCategoryOption('Quarters per year')
            clickMenuBarUpdateButton()
        } else {
            openDimension('pe')
            selectRelativePeriods(['Last quarter'], 'Quarters')
            clickModalUpdateButton()
        }
        expectAOTitleToBeDirty()
    })
    it('saves AO using "Save"', () => {
        saveExistingAO()
        expectAOTitleToNotBeDirty()
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
    })
    it('deletes AO', () => {
        deleteAO()
        expectRouteToBeEmpty()
        expectStartScreenToBeVisible()
    })
})

// New describe

// Open AO created by others
// Add period
// Check that name is "Edited"
// Check that save is disabled
// Save as "new name"
// Check that name is "new name"
// Delete
