/*  TODO: 
        Start with one of the following cases:
        1a) Start from scratch, can save
        1b) Start from scratch, can save as
        2a) AO "Created by you", can save
        2b) AO "Created by you", can save as
        3a) AO "Created by others", can't save 
        3b) AO "Created by others", can't save as

        Check that vis is loaded
        Check that AO name is not "Edited"
        Change vis type
        Check that AO name is "Edited"
        Save with "name"
        Check that name is not "Edited"
        Check that name is "name"
        Save as with "other name"
        Check that name is not "Edited"
        Check that name is "other name"
    */

//import { createNewAO } from '../elements/FileMenu'
import { openDimension } from '../elements/DimensionsPanel'
import {
    selectDataElements,
    clickModalUpdateButton,
} from '../elements/DimensionModal'
import { changeVisType } from '../elements/VisualizationTypeSelector'
import {
    expectAOTitleToBeUnsaved,
    expectAOTitleToBeValue,
    expectVisualizationToBeVisible,
} from '../elements/Chart'
import {
    DIMENSION_ID_DATA,
    visTypeDisplayNames,
    VIS_TYPE_COLUMN,
} from '@dhis2/analytics'
import { TEST_DATA_ELEMENTS } from '../utils/data'
import {
    expectSaveAsButtonToBeDisabled,
    saveNewAO,
    expectSaveAsButtonToBeEnabled,
    expectDeleteButtonToBeEnabled,
    expectRenameButtonToBeEnabled,
    expectTranslateButtonToBeEnabled,
    expectShareButtonToBeEnabled,
    expectGetLinkButtonToBeEnabled,
} from '../elements/FileMenu'
import { expectRouteToBeAOId, expectRouteToBeEmpty } from '../elements/Route'

const dimensionId = DIMENSION_ID_DATA
const dataElements = TEST_DATA_ELEMENTS.slice(1, 2).map(item => item.name)

// TODO: Add test to check that the description is saved and shown in the interpretations panel

describe('save AO', () => {
    it('goes to DV', () => {
        cy.visit('')
    })
    const availableVisTypes = [VIS_TYPE_COLUMN] //visTypes
    availableVisTypes.forEach(visType => {
        const visTypeName = visTypeDisplayNames[visType]
        describe(visTypeName, () => {
            const TEST_VIS_NAME = `TEST ${new Date().toLocaleString()}`
            const TEST_VIS_DESCRIPTION = 'Generated by Cypress'
            it('creates a new AO', () => {
                //createNewAO()
                cy.visit('') // FIXME: Use visit since the "New" button is currently broken
            })
            it('changes vis type', () => {
                changeVisType(visTypeName)
            })
            it('adds Data dimension items', () => {
                openDimension(dimensionId)
                selectDataElements(dataElements)
                clickModalUpdateButton()
            })
            it('displays an unsaved visualization', () => {
                expectVisualizationToBeVisible(visType)
                expectAOTitleToBeUnsaved()
                expectRouteToBeEmpty()
            })
            it('checks that Save as is disabled', () => {
                expectSaveAsButtonToBeDisabled()
            })
            it('saves new AO', () => {
                saveNewAO(TEST_VIS_NAME, TEST_VIS_DESCRIPTION)
                expectAOTitleToBeValue(TEST_VIS_NAME)
                expectVisualizationToBeVisible(visType)
            })
            it('checks that the url was changed', () => {
                expectRouteToBeAOId()
            })
            it('checks that Save as button is enabled', () => {
                expectSaveAsButtonToBeEnabled()
            })
            it('checks that Delete button is enabled', () => {
                expectDeleteButtonToBeEnabled()
            })
            it('checks that Rename button is enabled', () => {
                expectRenameButtonToBeEnabled()
            })
            it('checks that Translate button is enabled', () => {
                expectTranslateButtonToBeEnabled()
            })
            it('checks that Share button is enabled', () => {
                expectShareButtonToBeEnabled()
            })
            it('checks that Get link button is enabled', () => {
                expectGetLinkButtonToBeEnabled()
            })
            // ---- Loop through the steps below for both new and previously saved AOs
            // Change vis type
            // Check that AO name is "Edited"
            // Save with "name"
            // Check that name is not "Edited"
            // Check that name is "name"
            // Save as with "other name"
            // Check that name is not "Edited"
            // Check that name is "other name"
        })
    })
})
