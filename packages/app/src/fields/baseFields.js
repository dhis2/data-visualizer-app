// excluded fields

export const excludedFields = [
    'attributeDimensions',
    'attributeValues',
    'category',
    'categoryDimensions',
    'categoryOptionGroupSetDimensions',
    'code',
    'columnDimensions',
    'dataDimensionItems',
    'dataElementDimensions',
    'dataElementGroupSetDimensions',
    'dataElementGroups',
    'dataElementOperands',
    'dataElements',
    'dataSets',
    'externalAccess',
    'filterDimensions',
    'href',
    'indicators',
    'itemOrganisationUnitGroups',
    'organisationUnitGroupSetDimensions',
    'organisationUnitGroups',
    'organisationUnitLevels',
    'organisationUnits',
    'parentGraphMap',
    'periods',
    'programIndicatorDimensions',
    'relativePeriods',
    'rewindRelativePeriods',
    'rowDimensions',
    'series',
    'userOrganisationUnit',
    'userOrganisationUnitChildren',
    'userOrganisationUnitGrandChildren',
];

export const excludeFields = field => !excludedFields.includes(field);

// fields by type

export const fieldsByType = {
    reportTable: [
        'cumulative',
        'hideEmptyColumns',
        'legendDisplayStyle',
        'measureCriteria',
        'numberType',
        'regression',
        'reportParams',
        'skipRounding',
    ],
    chart: ['category', 'series'],
    eventReport: ['dataType'],
    reportTable_eventReport: [
        'colSubTotals',
        'colTotals',
        'displayDensity',
        'fontSize',
        'hideEmptyRows',
        'rowSubTotals',
        'rowTotals',
        'showDimensionLabels',
        'showHierarchy',
    ],
    chart_eventChart: [
        'baseLineLabel',
        'baseLineValue',
        'colorSet',
        'cumulativeValues',
        'domainAxisLabel',
        'hideEmptyRowItems',
        'hideLegend',
        'noSpaceBetweenColumns',
        'percentStackedValues',
        'rangeAxisDecimals',
        'rangeAxisLabel',
        'rangeAxisMaxValue',
        'rangeAxisMinValue',
        'rangeAxisSteps',
        'regressionType',
        'showData',
        'targetLineLabel',
        'targetLineValue',
        'type',
    ],
    eventReport_eventChart: [
        'attributeValueDimension',
        'collapseDataDimensions',
        'dataElementValueDimension',
        'endDate',
        'eventStatus',
        'hideNaData',
        'outputType',
        'program',
        'programStage',
        'programStatus',
        'startDate',
        'value',
    ],
    reportTable_chart_eventReport: ['legendDisplayStrategy', 'legendSet'],
    reportTable_eventReport_eventChart: ['columnDimensions', 'rowDimensions'],
    reportTable_chart_eventReport_eventChart: [
        'access',
        'aggregationType',
        'attributeDimensions',
        'attributeValues',
        'categoryDimensions',
        'categoryOptionGroupSetDimensions',
        'code',
        'columns',
        'completedOnly',
        'created',
        'dataDimensionItems',
        'dataElementDimensions',
        'dataElementGroupSetDimensions',
        'description',
        'digitGroupSeparator',
        'displayDescription',
        'displayName',
        'displayShortName',
        'externalAccess',
        'favorite',
        'favorites',
        'filterDimensions',
        'filters',
        'hideSubtitle',
        'hideTitle',
        'href',
        'id',
        'interpretations',
        'itemOrganisationUnitGroups',
        'lastUpdated',
        'lastUpdatedBy',
        'name',
        'organisationUnitGroupSetDimensions',
        'organisationUnitLevels',
        'organisationUnits',
        'parentGraphMap',
        'periods',
        'programIndicatorDimensions',
        'publicAccess',
        'relativePeriods',
        'rows',
        'shortName',
        'sortOrder',
        'subscribed',
        'subscribers',
        'subtitle',
        'timeField',
        'title',
        'topLimit',
        'translations',
        'user',
        'userAccesses',
        'userGroupAccesses',
        'userOrganisationUnit',
        'userOrganisationUnitChildren',
        'userOrganisationUnitGrandChildren',
    ],
};

export const getAllFieldsByType = type =>
    Object.entries(fieldsByType).reduce(
        (fields, [key, value]) =>
            key.includes(type) ? fields.concat(value) : fields,
        []
    );
