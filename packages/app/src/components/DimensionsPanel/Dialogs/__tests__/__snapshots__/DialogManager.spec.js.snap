// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The DialogManager component renders OUDimension content with display:none when previously mounted 1`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={true}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <div
    key="ou"
    style={
      Object {
        "display": "block",
      }
    }
  >
    <OrgUnitDimension
      onSelect={[Function]}
      ouItems={Array []}
    />
  </div>
  <Component>
    <HideButton
      onClick={[Function]}
    />
    <Connect(UpdateVisualizationContainer)
      renderComponent={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders OUDimension content with display:none when previously mounted 2`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={true}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <div
    key="ou"
    style={
      Object {
        "display": "none",
      }
    }
  >
    <OrgUnitDimension
      onSelect={[Function]}
      ouItems={Array []}
    />
  </div>
  <Component>
    <HideButton
      onClick={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders OUDimension content with display:none when previously mounted 3`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={false}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <div
    key="ou"
    style={
      Object {
        "display": "none",
      }
    }
  >
    <OrgUnitDimension
      onSelect={[Function]}
      ouItems={Array []}
    />
  </div>
  <DataDimension
    onSelect={[Function]}
    selectedDimensions={Array []}
  />
  <Component>
    <HideButton
      onClick={[Function]}
    />
    <Connect(UpdateVisualizationContainer)
      renderComponent={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders a closed dialog 1`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={true}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <Component>
    <HideButton
      onClick={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders the DataDimension content in dialog 1`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={false}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <DataDimension
    onSelect={[Function]}
    selectedDimensions={Array []}
  />
  <Component>
    <HideButton
      onClick={[Function]}
    />
    <Connect(UpdateVisualizationContainer)
      renderComponent={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders the OrgUnitDimension content in dialog 1`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={true}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <div
    key="ou"
    style={
      Object {
        "display": "block",
      }
    }
  >
    <OrgUnitDimension
      onSelect={[Function]}
      ouItems={Array []}
    />
  </div>
  <Component>
    <HideButton
      onClick={[Function]}
    />
    <Connect(UpdateVisualizationContainer)
      renderComponent={[Function]}
    />
  </Component>
</Component>
`;

exports[`The DialogManager component renders the PeriodDimension content in dialog 1`] = `
<Component
  data-test="dialog-manager"
  disableEnforceFocus={true}
  keepMounted={false}
  maxWidth="lg"
  onClose={[Function]}
  open={false}
>
  <PeriodDimension
    onSelect={[Function]}
    selectedPeriods={Array []}
  />
  <Component>
    <HideButton
      onClick={[Function]}
    />
    <Connect(UpdateVisualizationContainer)
      renderComponent={[Function]}
    />
  </Component>
</Component>
`;
