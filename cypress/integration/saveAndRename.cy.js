import {
    DIMENSION_ID_DATA,
    DIMENSION_ID_ORGUNIT,
    visTypeDisplayNames,
    VIS_TYPE_SCATTER,
    VIS_TYPE_PIVOT_TABLE,
} from '@dhis2/analytics'
import {
    expectAOTitleToBeDirty,
    expectAOTitleToBeUnsaved,
    expectAOTitleToBeValue,
    expectAOTitleToNotBeDirty,
    expectVisualizationToBeVisible,
} from '../elements/chart.js'
import {
    typeInput,
    clearInput,
    replacePeriodItems,
} from '../elements/common.js'
import {
    switchDataTab,
    selectIndicators,
    selectDataElements,
    clickDimensionModalUpdateButton,
    deselectOrgUnitTreeItem,
} from '../elements/dimensionModal/index.js'
import { openDimension } from '../elements/dimensionsPanel.js'
import {
    saveNewAO,
    closeFileMenuWithClick,
    saveAOAs,
    saveExistingAO,
    openAOByName,
    deleteAO,
    expectFileMenuButtonToBeEnabled,
    expectFileMenuButtonToBeDisabled,
    FILE_MENU_BUTTON_NEW,
    FILE_MENU_BUTTON_OPEN,
    FILE_MENU_BUTTON_SAVE_EXISTING,
    FILE_MENU_BUTTON_SAVEAS,
    FILE_MENU_BUTTON_DELETE,
    FILE_MENU_BUTTON_RENAME,
    FILE_MENU_BUTTON_TRANSLATE,
    FILE_MENU_BUTTON_SHARE,
    FILE_MENU_BUTTON_GETLINK,
} from '../elements/fileMenu/index.js'
import { clickMenuBarFileButton } from '../elements/menuBar.js'
import { expectRouteToBeAOId, expectRouteToBeEmpty } from '../elements/route.js'
import {
    expectStartScreenToBeVisible,
    goToStartPage,
} from '../elements/startScreen.js'
import { changeVisType } from '../elements/visualizationTypeSelector.js'
import { TEST_DATA_ELEMENTS, TEST_INDICATORS } from '../utils/data.js'
import { getRandomVisType } from '../utils/random.js'

const TEST_VIS_NAME = `TEST ${new Date().toLocaleString()}`
const TEST_VIS_NAME_UPDATED = `${TEST_VIS_NAME} - updated`
const TEST_VIS_DESCRIPTION = 'Generated by Cypress'
const TEST_VIS_TYPE = getRandomVisType()
const TEST_VIS_TYPE_NAME = visTypeDisplayNames[TEST_VIS_TYPE]
const TEST_INDICATOR_NAMES = TEST_INDICATORS.slice(1, 4).map(
    (item) => item.name
)

const renameVisualization = (name, description) => {
    cy.getBySel('dhis2-analytics-hovermenubar').contains('File').click()

    cy.getBySel('file-menu-rename').click()

    if (name !== undefined) {
        clearInput('file-menu-rename-modal-name-content')
        if (name.length > 0) {
            typeInput('file-menu-rename-modal-name-content', name)
        }
    }

    if (description !== undefined) {
        cy.getBySel('file-menu-rename-modal-description-content')
            .find('textarea')
            .clear()
        if (description.length > 0) {
            cy.getBySel('file-menu-rename-modal-description-content')
                .find('textarea')
                .type(description)
        }
    }

    cy.getBySel('file-menu-rename-modal-rename').click()
}

const clickMenubarInterpretationsButton = () =>
    cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()

describe('rename', () => {
    it('replace existing name works correctly', () => {
        const AO_NAME = `TEST RENAME ${new Date().toLocaleString()}`
        const UPDATED_AO_NAME = AO_NAME + ' superduper'

        goToStartPage()

        openDimension(DIMENSION_ID_DATA)
        selectDataElements(
            TEST_DATA_ELEMENTS.slice(1, 2).map((item) => item.name)
        )
        clickDimensionModalUpdateButton()

        // save
        saveNewAO(AO_NAME)
        expectAOTitleToBeValue(AO_NAME)
        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)

        cy.intercept('GET', /\/api\/\d+\/visualizations\/\w+\?fields=.*/).as(
            'get-visualization'
        )

        cy.intercept('PUT', /\/api\/\d+\/visualizations\/\w+/, (req) => {
            expect(req.body).to.have.property('subscribers')
            expect(req.body).to.have.property('filters')
        }).as('put-rename')

        // rename the AO, changing name only
        renameVisualization(UPDATED_AO_NAME)

        cy.wait('@get-visualization')
        cy.wait('@put-rename')
        cy.wait('@get-visualization')

        cy.getBySel('dhis2-uicore-alertbar')
            .contains('Rename successful')
            .should('be.visible')
        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)
        expectAOTitleToBeValue(AO_NAME)

        cy.reload(true)

        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)
        expectAOTitleToBeValue(UPDATED_AO_NAME)

        deleteAO()
    })

    it('add and change and delete name and description', () => {
        const AO_NAME = `TEST RENAME ${new Date().toLocaleString()}`
        const AO_DESC = 'with description'
        const AO_DESC_UPDATED = AO_DESC + ' edited'
        goToStartPage()

        openDimension(DIMENSION_ID_DATA)
        selectDataElements(
            TEST_DATA_ELEMENTS.slice(1, 2).map((item) => item.name)
        )
        clickDimensionModalUpdateButton()

        // save
        saveNewAO(AO_NAME)
        expectAOTitleToBeValue(AO_NAME)
        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)

        cy.intercept('PUT', '**/api/*/visualizations/*').as('put-rename')

        // rename the AO, adding a description
        renameVisualization(AO_NAME, AO_DESC)

        cy.wait('@put-rename')

        clickMenubarInterpretationsButton()
        cy.getBySel('details-panel').should('be.visible')
        cy.getBySel('details-panel').containsExact(AO_DESC)
        clickMenubarInterpretationsButton()

        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)

        cy.intercept('PUT', '**/api/*/visualizations/*').as('put-rename2')
        // rename the AO, replacing the description
        renameVisualization(AO_NAME, AO_DESC_UPDATED)

        cy.wait('@put-rename2')

        clickMenubarInterpretationsButton()
        cy.getBySel('details-panel').should('be.visible')
        cy.getBySel('details-panel').containsExact(AO_DESC_UPDATED)
        clickMenubarInterpretationsButton()

        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)

        cy.intercept('PUT', '**/api/*/visualizations/*').as('put-rename3')
        // now enter empty strings for the name and description
        renameVisualization('', '')

        cy.wait('@put-rename2')

        clickMenubarInterpretationsButton()

        cy.getBySel('details-panel').should('be.visible')
        cy.getBySel('details-panel').containsExact('No description')
        clickMenubarInterpretationsButton()

        cy.reload(true)

        // title is not deleted
        expectAOTitleToBeValue(AO_NAME)
        clickMenubarInterpretationsButton()
        cy.getBySel('details-panel').should('be.visible')
        // description was successfully deleted
        cy.getBySel('details-panel').contains('No description')
        clickMenubarInterpretationsButton()

        deleteAO()
    })

    it('handles failure when renaming', () => {
        const AO_NAME = `TEST RENAME ${new Date().toLocaleString()}`
        const UPDATED_AO_NAME = AO_NAME + ' superduper'
        goToStartPage()

        openDimension(DIMENSION_ID_DATA)
        selectDataElements(
            TEST_DATA_ELEMENTS.slice(1, 2).map((item) => item.name)
        )
        clickDimensionModalUpdateButton()

        // save
        saveNewAO(AO_NAME)
        expectAOTitleToBeValue(AO_NAME)
        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)

        cy.intercept('PUT', '**/api/*/visualizations/*', {
            statusCode: 409,
        }).as('put-rename')

        // rename the AO, changing name only
        renameVisualization(UPDATED_AO_NAME)

        cy.wait('@put-rename')

        cy.getBySel('dhis2-uicore-alertbar')
            .contains('Rename failed')
            .should('be.visible')
        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)
        expectAOTitleToBeValue(AO_NAME)

        cy.reload(true)

        expectVisualizationToBeVisible(VIS_TYPE_PIVOT_TABLE)
        expectAOTitleToBeValue(AO_NAME)

        deleteAO()
    })
})

describe('saving an AO', () => {
    it('"save" and "save as" for a new AO', () => {
        // navigates to the start page
        goToStartPage()

        // checks that Save is disabled
        clickMenuBarFileButton()
        expectFileMenuButtonToBeDisabled(FILE_MENU_BUTTON_SAVE_EXISTING)
        closeFileMenuWithClick()

        // changes vis type
        cy.log(`changes vis type to ${TEST_VIS_TYPE_NAME}`)
        changeVisType(TEST_VIS_TYPE_NAME)

        // adds Data dimension items
        if (TEST_VIS_TYPE === VIS_TYPE_SCATTER) {
            openDimension(DIMENSION_ID_DATA)
            switchDataTab('Vertical')
            selectIndicators([TEST_INDICATOR_NAMES[0]])
            clickDimensionModalUpdateButton()
            openDimension(DIMENSION_ID_DATA)
            switchDataTab('Horizontal')
            selectIndicators([TEST_INDICATOR_NAMES[1]])
            clickDimensionModalUpdateButton()
        } else {
            openDimension(DIMENSION_ID_DATA)
            selectDataElements(
                TEST_DATA_ELEMENTS.slice(1, 2).map((item) => item.name)
            )
            clickDimensionModalUpdateButton()
        }

        // displays an unsaved visualization
        expectVisualizationToBeVisible(TEST_VIS_TYPE)
        expectAOTitleToBeUnsaved()
        expectRouteToBeEmpty()

        // checks that Save is enabled
        clickMenuBarFileButton()
        expectFileMenuButtonToBeEnabled(FILE_MENU_BUTTON_SAVE_EXISTING)
        closeFileMenuWithClick()

        // checks that Save as is disabled
        clickMenuBarFileButton()
        expectFileMenuButtonToBeDisabled(FILE_MENU_BUTTON_SAVEAS)
        closeFileMenuWithClick()

        // saves new AO using "Save"
        saveNewAO(TEST_VIS_NAME, TEST_VIS_DESCRIPTION)
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)

        // checks that the url was changed
        expectRouteToBeAOId()

        // all File menu buttons but Save are enabled
        clickMenuBarFileButton()
        const enabledButtons = [
            FILE_MENU_BUTTON_NEW,
            FILE_MENU_BUTTON_OPEN,
            FILE_MENU_BUTTON_SAVEAS,
            FILE_MENU_BUTTON_RENAME,
            FILE_MENU_BUTTON_TRANSLATE,
            FILE_MENU_BUTTON_SHARE,
            FILE_MENU_BUTTON_GETLINK,
            FILE_MENU_BUTTON_DELETE,
        ]
        enabledButtons.forEach((button) =>
            expectFileMenuButtonToBeEnabled(button)
        )
        closeFileMenuWithClick()

        // replaces the selected period
        replacePeriodItems(TEST_VIS_TYPE)
        expectAOTitleToBeDirty()
        expectVisualizationToBeVisible(TEST_VIS_TYPE)

        // saves AO using "Save"

        // subscribe to the AO
        cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()
        cy.intercept(
            'POST',
            /\/api\/\d+\/visualizations\/\w+\/subscriber/,
            (req) => {
                req.continue((res) => {
                    expect([200, 201]).to.include(res.statusCode)
                })
            }
        ).as('post-subscriber')
        cy.get('button').contains('Subscribe').should('be.visible')
        cy.get('button').contains('Subscribe').click()
        cy.wait('@post-subscriber')
        cy.get('button').contains('Unsubscribe').should('be.visible')
        cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()
        cy.contains('About this visualization').should('not.exist')

        // check first GET request fetches subscribers
        cy.intercept(
            'GET',
            /\/api\/\d+\/visualizations\/\w+\?fields=subscribers/
        ).as('get-subscribers')

        // check the save request contains subscribers
        cy.intercept('PUT', /\/api\/\d+\/visualizations\/\w+/, (req) => {
            expect(req.body).to.have.property('subscribers')
        }).as('put-save')

        saveExistingAO()
        cy.wait('@get-subscribers')
        cy.wait('@put-save')
        expectAOTitleToNotBeDirty()
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)

        // check user is still subscribed
        cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()
        cy.get('button').contains('Unsubscribe').should('be.visible')
        cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()
        cy.contains('About this visualization').should('not.exist')

        // saves AO using "Save As"
        cy.intercept('POST', /\/api\/\d+\/visualizations/, (req) => {
            expect(req.body).to.not.have.property('subscribers')
        }).as('post-saveas')
        saveAOAs(TEST_VIS_NAME_UPDATED)
        cy.wait('@post-saveas')
        expectAOTitleToBeValue(TEST_VIS_NAME_UPDATED)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)

        cy.getBySel('dhis2-analytics-interpretationsanddetailstoggler').click()
        cy.contains('About this visualization').should('be.visible')
        cy.get('button').contains('Unsubscribe').should('not.exist')
    })

    it('"save" and "save as" for a saved AO created by you', () => {
        // navigates to the start page and opens a saved AO
        cy.intercept(
            /systemSettings(\S)*keyAnalysisRelativePeriod(\S)*/,
            (req) => {
                req.reply((res) => {
                    res.send({
                        body: {
                            ...res.body,
                            keyHideMonthlyPeriods: false,
                        },
                    })
                })
            }
        )
        goToStartPage()
        openAOByName(TEST_VIS_NAME_UPDATED)
        expectAOTitleToBeValue(TEST_VIS_NAME_UPDATED)

        // replaces the selected period
        replacePeriodItems(TEST_VIS_TYPE, { useAltData: true })
        expectAOTitleToBeDirty()

        // saves AO using "Save"
        saveExistingAO()
        expectAOTitleToNotBeDirty()
        expectAOTitleToBeValue(TEST_VIS_NAME)
        expectVisualizationToBeVisible(TEST_VIS_TYPE)

        // deletes AO
        deleteAO()
        expectRouteToBeEmpty()
        expectStartScreenToBeVisible()
    })

    it('"save" a copied AO created by others works after editing', () => {
        const TEST_VIS_BY_OTHERS_NAME = 'ANC: 1-3 dropout rate Yearly'
        const TEST_VIS_BY_OTHERS_NAME_UPDATED = `${TEST_VIS_BY_OTHERS_NAME} - updated`

        // navigates to the start page and opens an AO created by others
        goToStartPage()
        openAOByName(TEST_VIS_BY_OTHERS_NAME)
        expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME)

        // saves AO using "Save As"
        saveAOAs(TEST_VIS_BY_OTHERS_NAME_UPDATED)
        expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME_UPDATED)
        expectVisualizationToBeVisible()

        // edits the AO
        openDimension(DIMENSION_ID_ORGUNIT)
        deselectOrgUnitTreeItem('Western Area')
        clickDimensionModalUpdateButton()

        // saves AO using "Save"
        saveExistingAO()
        expectAOTitleToNotBeDirty()
        expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME_UPDATED)
        expectVisualizationToBeVisible()

        // deletes AO
        deleteAO()
        expectRouteToBeEmpty()
        expectStartScreenToBeVisible()
    })
})
