import {
    DIMENSION_ID_DATA,
    DIMENSION_ID_ORGUNIT,
    visTypeDisplayNames,
    VIS_TYPE_SCATTER,
} from '@dhis2/analytics'
import {
    expectAOTitleToBeDirty,
    expectAOTitleToBeUnsaved,
    expectAOTitleToBeValue,
    expectAOTitleToNotBeDirty,
    expectVisualizationToBeVisible,
} from '../elements/chart.js'
import { replacePeriodItems } from '../elements/common.js'
import {
    switchDataTab,
    selectIndicators,
    selectDataElements,
    clickDimensionModalUpdateButton,
    deselectOrgUnitTreeItem,
} from '../elements/dimensionModal/index.js'
import { openDimension } from '../elements/dimensionsPanel.js'
import {
    saveNewAO,
    closeFileMenuWithClick,
    saveAOAs,
    saveExistingAO,
    openAOByName,
    deleteAO,
    expectFileMenuButtonToBeEnabled,
    expectFileMenuButtonToBeDisabled,
    FILE_MENU_BUTTON_NEW,
    FILE_MENU_BUTTON_OPEN,
    FILE_MENU_BUTTON_SAVE_EXISTING,
    FILE_MENU_BUTTON_SAVEAS,
    FILE_MENU_BUTTON_DELETE,
    FILE_MENU_BUTTON_RENAME,
    FILE_MENU_BUTTON_TRANSLATE,
    FILE_MENU_BUTTON_SHARE,
    FILE_MENU_BUTTON_GETLINK,
} from '../elements/fileMenu/index.js'
import { clickMenuBarFileButton } from '../elements/menuBar.js'
import { expectRouteToBeAOId, expectRouteToBeEmpty } from '../elements/route.js'
import {
    expectStartScreenToBeVisible,
    goToStartPage,
} from '../elements/startScreen.js'
import { changeVisType } from '../elements/visualizationTypeSelector.js'
import { TEST_DATA_ELEMENTS, TEST_INDICATORS } from '../utils/data.js'
import { getRandomVisType } from '../utils/random.js'

const TEST_VIS_NAME = `TEST ${new Date().toLocaleString()}`
const TEST_VIS_NAME_UPDATED = `${TEST_VIS_NAME} - updated`
const TEST_VIS_DESCRIPTION = 'Generated by Cypress'
const TEST_VIS_TYPE = getRandomVisType()
const TEST_VIS_TYPE_NAME = visTypeDisplayNames[TEST_VIS_TYPE]
const TEST_INDICATOR_NAMES = TEST_INDICATORS.slice(1, 4).map(
    (item) => item.name
)

// TODO: Add test to check that the description is saved and shown in the interpretations panel

describe('saving an AO', () => {
    describe('"save" and "save as" for a new AO', () => {
        it('navigates to the start page', () => {
            goToStartPage()
        })
        it('checks that Save is disabled', () => {
            clickMenuBarFileButton()
            expectFileMenuButtonToBeDisabled(FILE_MENU_BUTTON_SAVE_EXISTING)
            closeFileMenuWithClick()
        })
        it(`changes vis type to ${TEST_VIS_TYPE_NAME}`, () => {
            changeVisType(TEST_VIS_TYPE_NAME)
        })
        it('adds Data dimension items', () => {
            if (TEST_VIS_TYPE === VIS_TYPE_SCATTER) {
                openDimension(DIMENSION_ID_DATA)
                switchDataTab('Vertical')
                selectIndicators([TEST_INDICATOR_NAMES[0]])
                clickDimensionModalUpdateButton()
                openDimension(DIMENSION_ID_DATA)
                switchDataTab('Horizontal')
                selectIndicators([TEST_INDICATOR_NAMES[1]])
                clickDimensionModalUpdateButton()
            } else {
                openDimension(DIMENSION_ID_DATA)
                selectDataElements(
                    TEST_DATA_ELEMENTS.slice(1, 2).map((item) => item.name)
                )
                clickDimensionModalUpdateButton()
            }
        })
        it('displays an unsaved visualization', () => {
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
            expectAOTitleToBeUnsaved()
            expectRouteToBeEmpty()
        })
        it('checks that Save is enabled', () => {
            clickMenuBarFileButton()
            expectFileMenuButtonToBeEnabled(FILE_MENU_BUTTON_SAVE_EXISTING)
            closeFileMenuWithClick()
        })
        it('checks that Save as is disabled', () => {
            clickMenuBarFileButton()
            expectFileMenuButtonToBeDisabled(FILE_MENU_BUTTON_SAVEAS)
            closeFileMenuWithClick()
        })
        it('saves new AO using "Save"', () => {
            saveNewAO(TEST_VIS_NAME, TEST_VIS_DESCRIPTION)
            expectAOTitleToBeValue(TEST_VIS_NAME)
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
        })
        it('checks that the url was changed', () => {
            expectRouteToBeAOId()
        })
        it('all File menu buttons but Save are enabled', () => {
            clickMenuBarFileButton()
            const enabledButtons = [
                FILE_MENU_BUTTON_NEW,
                FILE_MENU_BUTTON_OPEN,
                FILE_MENU_BUTTON_SAVEAS,
                FILE_MENU_BUTTON_RENAME,
                FILE_MENU_BUTTON_TRANSLATE,
                FILE_MENU_BUTTON_SHARE,
                FILE_MENU_BUTTON_GETLINK,
                FILE_MENU_BUTTON_DELETE,
            ]
            enabledButtons.forEach((button) =>
                expectFileMenuButtonToBeEnabled(button)
            )
            closeFileMenuWithClick()
        })
        it(`replaces the selected period`, () => {
            replacePeriodItems(TEST_VIS_TYPE)
            expectAOTitleToBeDirty()
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
        })
        it('saves AO using "Save"', () => {
            saveExistingAO()
            expectAOTitleToNotBeDirty()
            expectAOTitleToBeValue(TEST_VIS_NAME)
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
        })
        it('saves AO using "Save As"', () => {
            saveAOAs(TEST_VIS_NAME_UPDATED)
            expectAOTitleToBeValue(TEST_VIS_NAME_UPDATED)
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
        })
    })

    describe('"save" and "save as" for a saved AO created by you', () => {
        it('navigates to the start page and opens a saved AO', () => {
            cy.intercept(
                /systemSettings(\S)*keyAnalysisRelativePeriod(\S)*/,
                (req) => {
                    req.reply((res) => {
                        res.send({
                            body: {
                                ...res.body,
                                keyHideMonthlyPeriods: false,
                            },
                        })
                    })
                }
            )
            goToStartPage()
            openAOByName(TEST_VIS_NAME_UPDATED)
            expectAOTitleToBeValue(TEST_VIS_NAME_UPDATED)
        })
        it(`replaces the selected period`, () => {
            replacePeriodItems(TEST_VIS_TYPE, { useAltData: true })
            expectAOTitleToBeDirty()
        })
        it('saves AO using "Save"', () => {
            saveExistingAO()
            expectAOTitleToNotBeDirty()
            expectAOTitleToBeValue(TEST_VIS_NAME)
            expectVisualizationToBeVisible(TEST_VIS_TYPE)
        })
        it('deletes AO', () => {
            deleteAO()
            expectRouteToBeEmpty()
            expectStartScreenToBeVisible()
        })
    })

    describe('"save" a copied AO created by others', () => {
        it('works after editing', () => {
            const TEST_VIS_BY_OTHERS_NAME = 'ANC: 1-3 dropout rate Yearly'
            const TEST_VIS_BY_OTHERS_NAME_UPDATED = `${TEST_VIS_BY_OTHERS_NAME} - updated`

            // navigates to the start page and opens an AO created by others
            goToStartPage()
            openAOByName(TEST_VIS_BY_OTHERS_NAME)
            expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME)

            // saves AO using "Save As"
            saveAOAs(TEST_VIS_BY_OTHERS_NAME_UPDATED)
            expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME_UPDATED)
            expectVisualizationToBeVisible()

            // edits the AO
            openDimension(DIMENSION_ID_ORGUNIT)
            deselectOrgUnitTreeItem('Western Area')
            clickDimensionModalUpdateButton()

            // saves AO using "Save"
            saveExistingAO()
            expectAOTitleToNotBeDirty()
            expectAOTitleToBeValue(TEST_VIS_BY_OTHERS_NAME_UPDATED)
            expectVisualizationToBeVisible()

            // deletes AO
            deleteAO()
            expectRouteToBeEmpty()
            expectStartScreenToBeVisible()
        })
    })
})
